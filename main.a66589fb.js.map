{"version":3,"sources":["scripts/main.js"],"names":["tableBody","document","querySelector","tableHead","formatNumber","number","replace","stringsCompare","first","second","localeCompare","numbersCompare","addEventListener","e","column","target","closest","columnIndex","sortedRows","parentElement","children","findIndex","child","columnName","textContent","sort","currentRow","nextRow","append"],"mappings":";AAAA,aAmDC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAjDD,IAAMA,EAAYC,SAASC,cAAc,SACnCC,EAAYF,SAASC,cAAc,SAsCzC,SAASE,EAAaC,GACb,OAACA,EAAOC,QAAQ,WAAY,IAGrC,SAASC,EAAeC,EAAOC,GACtBD,OAAAA,EAAME,cAAcD,GAG7B,SAASE,EAAeH,EAAOC,GACtBD,OAAAA,EAAQC,EA7CjBN,EAAUS,iBAAiB,QAAS,SAAAC,GAC5BC,IAAAA,EAASD,EAAEE,OAAOC,QAAQ,MAE5B,GAACF,EAAD,CAIEG,IAGFC,EAHED,EAAc,EAAIH,EAAOK,cAAcC,UAC1CC,UAAU,SAAAC,GAASA,OAAAA,IAAUR,IAIxBS,OAHWT,EAAOU,aAInB,IAAA,OACA,IAAA,WACHN,EAAa,EAAIlB,EAAUoB,UAAUK,KAAK,SAACC,EAAYC,GAC9CpB,OAAAA,EACLmB,EAAWN,SAASH,GAAaO,YACjCG,EAAQP,SAASH,GAAaO,eAGlC,MACG,IAAA,MACA,IAAA,SACHN,EAAa,EAAIlB,EAAUoB,UAAUK,KAAK,SAACC,EAAYC,GAC9ChB,OAAAA,EACLP,EAAasB,EAAWN,SAASH,GAAaO,aAC9CpB,EAAauB,EAAQP,SAASH,GAAaO,gBAMnDxB,EAAU4B,OAAV5B,MAAAA,EAAoBkB,EAAAA","file":"main.a66589fb.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tableBody = document.querySelector('tbody');\nconst tableHead = document.querySelector('thead');\n\ntableHead.addEventListener('click', e => {\n  const column = e.target.closest('th');\n\n  if (!column) {\n    return;\n  }\n\n  const columnIndex = [...column.parentElement.children]\n    .findIndex(child => child === column);\n  const columnName = column.textContent;\n  let sortedRows;\n\n  switch (columnName) {\n    case 'Name':\n    case 'Position':\n      sortedRows = [...tableBody.children].sort((currentRow, nextRow) => {\n        return stringsCompare(\n          currentRow.children[columnIndex].textContent,\n          nextRow.children[columnIndex].textContent,\n        );\n      });\n      break;\n    case 'Age':\n    case 'Salary':\n      sortedRows = [...tableBody.children].sort((currentRow, nextRow) => {\n        return numbersCompare(\n          formatNumber(currentRow.children[columnIndex].textContent),\n          formatNumber(nextRow.children[columnIndex].textContent),\n        );\n      });\n      break;\n  }\n\n  tableBody.append(...sortedRows);\n});\n\nfunction formatNumber(number) {\n  return +number.replace(/[^0-9.]/g, '');\n}\n\nfunction stringsCompare(first, second) {\n  return first.localeCompare(second);\n}\n\nfunction numbersCompare(first, second) {\n  return first - second;\n}\n"]}